#!/usr/bin/env lua

local u = require('utils')
local git = require('git')
local Repo = require('repo')

local delim = function ()
  print('==========================') 
end

function os.capture(cmd, raw)
  local f = assert(io.popen(cmd, 'r'))
  local s = assert(f:read('*a'))
  f:close()
  if raw then return s end
  s = string.gsub(s, '^%s+', '')
  s = string.gsub(s, '%s+$', '')
  s = string.gsub(s, '[\n\r]+', ' ')
  return s
end

local make_dict = function(t)
  local r = {}
  for _, v in pairs(t) do r[v] = true end
  return r
end

--[[
keep a scanlist in a text file
scan for new repos
]]

local env = {}
env.home = os.getenv("HOME")

local git_locations = u.split(os.capture("fd .git$ $HOME -t d -t f -H -d 4"))

local f = io.open("locations", 'w+')

io.output(f)

local scanlist = make_dict({
  '~/dots',
  -- '~/dots/nvim/.config/nvim',
  '~/dots/personal',
  -- '~/dots/zsh',
})

-- for _, v in pairs(git_locations) do
--   local short = v:gsub(env.home, '~'):gsub('/.git$', '')
--   if scanlist[short] then
--     print(short)
--   else
--     print(short.." doesn't exist.")
--   end
--   io.write(short..'\n')
-- end

-- TODO: tell user which entry in scanlist doesn't exist
local git_repos = {}
local not_repos = {}
for k, _ in pairs(scanlist) do
  local dir = k:gsub('^~', env.home)
  local g = dir .. '/.git'
  if u.exists(g) then
    table.insert(git_repos, dir)
  else
    table.insert(not_repos, dir)
  end
end

table.sort(git_repos)
table.sort(not_repos)

-- for _, v in pairs(git_repos) do print(v) end

-- delim()

-- for _, v in pairs(not_repos) do print(v.." doesn't exist") end

-- delim()

-- for _, dir in pairs(git_repos) do
--   print('\n[ '..dir..' ]')
--   local git_status = git.status(dir)
--   if git_status then
--     for _, v in pairs(git_status) do
--       print(v)
--     end
--   end
-- 
--   local git_commits = git.commits(dir)
--   if git_commits then
--     for _, v in pairs(git_commits) do
--       print(v)
--     end
--   end
-- end


local repos = {}
-- repos.meme = Repo.new('whereis')
-- Repo.print(repos.meme)

for _, dir in pairs(git_repos) do
  repos[dir] = Repo.new(dir)
end

-- checks
for _, dir in pairs(git_repos) do
  Repo.print(repos[dir])
end
