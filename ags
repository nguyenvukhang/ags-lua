#!/usr/bin/env lua

local u = require('utils')

function os.capture(cmd, raw)
  local f = assert(io.popen(cmd, 'r'))
  local s = assert(f:read('*a'))
  f:close()
  if raw then return s end
  s = string.gsub(s, '^%s+', '')
  s = string.gsub(s, '%s+$', '')
  s = string.gsub(s, '[\n\r]+', ' ')
  return s
end

local split = function (inputstr, sep)
  if sep == nil then sep = "%s" end
  local t = {}
  for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
    table.insert(t, str)
  end
  return t
end

local make_dict = function(t)
  local r = {}
  for _, v in pairs(t) do r[v] = true end
  return r
end

--[[
keep a scanlist in a text file
scan for new repos
]]

local env = {}
env.home = os.getenv("HOME")

local git_locations = split(os.capture("fd .git$ $HOME -t d -t f -H -d 4"))

local f = io.open("locations", 'w+')

io.output(f)

local scanlist = make_dict({
  '~/dots',
  '~/dots/nvim/.config/nvim',
  '~/dots/pass/.password-store',
  '~/sunnus/test/dev',
  '~/dots/personal',
  '~/dots/walls',
  '~/dots/zsh',
  '~/repos/blog',
  '~/repos/hcanoe-firebase/repo',
  '~/repos/min',
  '~/sunnus/wasdfeb/dev',
  '~/repos/notes',
  '~/repos/uni/nightly',
  '~/sunnus/app/dev',
  '~/sunnus/web/dev',
})

-- for _, v in pairs(git_locations) do
--   local short = v:gsub(env.home, '~'):gsub('/.git$', '')
--   if scanlist[short] then
--     print(short)
--   else
--     print(short.." doesn't exist.")
--   end
--   io.write(short..'\n')
-- end

-- TODO: tell user which entry in scanlist doesn't exist
local git_repos = {}
local not_repos = {}
for k, _ in pairs(scanlist) do
  local d = k:gsub('^~', env.home)
  local g = d .. '/.git'
  if u.exists(g) then
    table.insert(git_repos, d)
  else
    table.insert(not_repos, d)
  end
end

table.sort(git_repos)
table.sort(not_repos)

for _, v in pairs(git_repos) do
  print(v)
end

print('-------------------')

for _, v in pairs(not_repos) do
  print(v.." doesn't exist")
end

print('-------------------')

for _, v in pairs(git_repos) do
  local git_status = os.capture("git -C "..v.." status -s", true)
  print(git_status)
  -- for _, s in pairs(git_status) do
  --   print(s)
  -- end
end
